<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd	
	http://www.springframework.org/schema/p
	http://www.springframework.org/schema/p/spring-p-3.2.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	<!-- 1.引入database.properties文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:database.properties"/>
	</bean>
	
	<!-- 2.配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>
	
	<!-- 3.创建SqlSessionFactoryBean对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 3.1引用数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 3.2配置myabatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 3.3 引入SQL映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:cn/leave/dao/**/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 4.使用MapperScannerConfigurer去简化Dao层的配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.leave.dao"/>
	</bean>
	
	<!-- 5.使用注解去简化service层的配置 -->
	<context:component-scan base-package="cn.leave.service"/>
	
	<!-- 6.使用AOP去实现日志记录 -->
	<!-- 6.1创建一个增强类对象 -->
	<bean id="leaveLogger" class="cn.leave.logger.LeaveLogger"/>
	<!-- 6.2使用aop:config标签实现将日志织入业务中 -->
	<aop:config>
		<aop:pointcut expression="execution(* cn.leave.service..*.*(..))" id="pointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
		<aop:aspect ref="leaveLogger">
			<aop:before method="before" pointcut-ref="pointcut"/>
			<aop:after-returning method="afterReturning" pointcut-ref="pointcut" returning="result"/>
			<aop:after-throwing method="afterThrowing" pointcut-ref="pointcut" throwing="e"/>
			<aop:after method="after" pointcut-ref="pointcut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- 7.使用AOP去实现声明式事务记录 -->
	<!-- 7.1定义事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 7.2 通过tx:advice标签为指定的事务管理器设置属性值 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
</beans>